import java.io.IOException;
import java.util.Objects;

/**
 * Encoder modeled after {@link ArithmeticEncoder}
 * @author WB
 *
 */
public class ArithmeticCharEncoder extends ArithmeticCoderBase {
	
	// Number of saved underflow bits. This value can grow without bound,
	// so a truly correct implementation would use a BigInteger.
	private int numUnderflow;

	public ArithmeticCharEncoder(int numBits) {
		super(numBits);
		// fill in
		numUnderflow = 0;
	}

	@Override
	protected void shift() throws IOException {
		// TODO Auto-generated method stub
		
	}

	@Override
	protected void underflow() {
		if (numUnderflow == Integer.MAX_VALUE)
			throw new ArithmeticException("Maximum underflow reached");
		numUnderflow++;
	}
	
}
